// pausing development on API search for now

//the following was generated by Claude 
/* 
export default async function searchBooks(query, options = {}) {
    try {
        // default options
        const {
            limit = 10,
            fields = 'key,title,author_name,first_publish_year,isbn',
            offset = 0
        } = options;

        const cleanQuery = query.trim();
        if (!cleanQuery) {
            return {success: false, error: 'search query is required'};
        }

        const baseUrl = 'https://openlibrary.org.search.json';
        const params = new URLSearchParams({
            q: cleanQuery,
            limit: limit.toString(),
            fields: fields,
            offeset: offset.toString()
        });

        const url = `${baseUrl}?${params}`;
        console.log('searching open library:', url);

        const response = await fetch(url);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('raw api response:', data);

        const books = data.docs.map(book => ({
            key: book.key,
            title: book.title || 'unknown title',
            authors: book.author_name || ['unknown author'],
            firstPublishYear: book.first_publish_year || null,
            isbn: book.isbn?.[0] || null,
            openLibraryId: book.key?.replace('/works/', '') || null
        }));

        return {
            success: true,
            data: {
                books,
                totaleResults: data.numFound || 0,
                currentPage: Math.floor(offset / limit) + 1,
                hasMore: (offset + limit) < (data.numfound) || 0,
                query: cleanQuery
            }
        };
    } catch (err) {
        console.error('book search error', err);
        return {
            success: false,
            error: err.message || 'failed to search books'
        }
    }
}

// Additional helper function for more specific searches
export async function searchBooksByTitle(title, options = {}) {
    return searchBooks(`title:"${title}"`, options);
}

export async function searchBooksByAuthor(author, options = {}) {
    return searchBooks(`author:"${author}"`, options);
}

export async function searchBooksByISBN(isbn, options = {}) {
    return searchBooks(`isbn:${isbn}`, options);
}
    */